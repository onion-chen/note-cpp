import{_ as t,c as i,o as a,a2 as n}from"./chunks/framework.DTuuP5a5.js";const y=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"cpp/03运算符.md","filePath":"cpp/03运算符.md","lastUpdated":1752413042000}'),e={name:"cpp/03运算符.md"};function l(p,s,h,k,r,d){return a(),i("div",null,s[0]||(s[0]=[n(`<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><p>认识了C++的基本数据类型后，接下来就要操作这些数据了。而要操作数据，就离不开运算符和表达式。包括赋值运算、算数运算、关系运算、逻辑运算、逗号运算、位运算、移位运算、sizeof运算等。</p><h2 id="_1-表达式" tabindex="-1">1. 表达式 <a class="header-anchor" href="#_1-表达式" aria-label="Permalink to &quot;1. 表达式&quot;">​</a></h2><p>C++中，表达式由运算符、操作数、括号等组成。简单的表达式只包含一个数值，复杂的表达式包含多个操作数和多个运算符。</p><p>C++中的运算符多数继承自C语言，新增的运算符仅有“::”(作用域运算符)和“-&gt;”(指向运算符)。根据操作数的数量，运算符可分为单目运算符、双目运算符和三目运算符。</p><p>复杂表达式中，运算符执行的先后顺序由它们的优先级和结合性决定。表达式的值的数据类型由运算符的种类和操作数的数据类型决定。</p><p>表达式可出现在赋值语句的右侧或函数的参数中。表达式可返回一个结果，其数据类型取决于组成表达式的变量和常量的类型。</p><p>程序中常常遇到的赋值符号“=”就是赋值运算符，其作用就是将一个数据赋值给一个变量。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>赋值表达式的一般形式为：数据类型 变量名 = 表达式。</p><h2 id="_2-算数运算符" tabindex="-1">2. 算数运算符 <a class="header-anchor" href="#_2-算数运算符" aria-label="Permalink to &quot;2. 算数运算符&quot;">​</a></h2><p>算数运算符包括4个单目运算符和5个双目运算符。</p><table tabindex="0"><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">功能</th><th style="text-align:center;">用法</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">取正值</td><td style="text-align:center;">---</td><td style="text-align:center;">+520</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">加法运算</td><td style="text-align:center;">x + y</td><td style="text-align:center;">1 + 2</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">取负值</td><td style="text-align:center;">---</td><td style="text-align:center;">-520</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减法运算</td><td style="text-align:center;">x - y</td><td style="text-align:center;">5 - 2</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘法运算</td><td style="text-align:center;">x * y</td><td style="text-align:center;">2 * 5</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除法运算</td><td style="text-align:center;">x / y</td><td style="text-align:center;">9 / 3</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">取模运算</td><td style="text-align:center;">x % y</td><td style="text-align:center;">5 % 2</td></tr><tr><td style="text-align:center;">++</td><td style="text-align:center;">自增</td><td style="text-align:center;">x++、++y</td><td style="text-align:center;">x++、++y</td></tr><tr><td style="text-align:center;">--</td><td style="text-align:center;">自减</td><td style="text-align:center;">x--、--y</td><td style="text-align:center;">x--、--y</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">说明</p><p>x，y表示使用运算符的对象，可以是表达式、变量或常量。</p><p>表达式求值时，会按照运算符的优先级别从高到低依次执行。单目正和单目负的优先级最高；“*”、“/”、“%”的优先级高于“+”、“-”；括号在所有运算符中优先级最高，可以改变运算顺序。当运算符的优先级相同时，结合方向为“自左向右”。这和数学中的计算顺序是一样的。</p></div><h2 id="_3-算数表达式" tabindex="-1">3. 算数表达式 <a class="header-anchor" href="#_3-算数表达式" aria-label="Permalink to &quot;3. 算数表达式&quot;">​</a></h2><p>使用算数运算符的表达式称为算数表达式。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Top </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Width;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>进行四则混合运算时，不同的数据类型会先自动转化成同一类型，然后再进行运算。</p><p>1、若所有操作数的数据类型相同，则表达式运算结果的数据类型和操作数的数据类型相同。例如，两个整型数相加，其结果仍然是一个整型数。</p><p>2、若操作数的数据类型不同，则表达式运算结果的数据类型取最高的数据类型，以保证数据精度不会发生损失。例如，混合运算<code>10 + &#39;a&#39; - 1.5 + 3.2 * 6</code>中出现了整型、字符型、浮点型，表达式的运算结果是浮点型。</p><h3 id="_3-1-自增、自减" tabindex="-1">3.1 自增、自减 <a class="header-anchor" href="#_3-1-自增、自减" aria-label="Permalink to &quot;3.1 自增、自减&quot;">​</a></h3><p>自增运算符“++”和自减运算符“--”对变量的操作效果分别是使用变量增加1和减少1.</p><p>自增、自减运算符可以放在变量前面，如<code>++x</code>，这种情况称为前缀运算；也可以放在变量的后面，如<code>x--</code>，这种情况称为后缀运算。两者对运算结果的影响是不一样的。</p><ul><li>前缀运算中，变量先完成自增或自减运算，再以增减后的结果参与表达式运算</li><li>后缀运算中，变量先参加表达式运算，之后再进行自增或自减</li></ul><p>当自增、自减运算符出现在表达式内部，作为运算的一部分时，前缀和后缀的运算结果差异很大。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// x先赋值再自增，a为10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// y先自增在复制，b为21</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>小练习：</strong> 计算基本收益，某基金年利率为3.5%，现存入1万元本金，问一天后连本带利有多少钱。计算公式：一天收益 = 本金 * 年化利率 / 365;</p><details class="details custom-block"><summary>解析</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 					// 年利率</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">									// 本金</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 最终收益</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></details><h2 id="_4-关系运算符" tabindex="-1">4. 关系运算符 <a class="header-anchor" href="#_4-关系运算符" aria-label="Permalink to &quot;4. 关系运算符&quot;">​</a></h2><p>关系运算符包括大于、大于或等于、小于、小于或等于、等于和不等六种运算符。</p><table tabindex="0"><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th style="text-align:center;">用法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td><td style="text-align:center;">x &gt; y</td><td style="text-align:center;">前者大于后者，运算结果为真，否则为假</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td><td style="text-align:center;">x &lt; y</td><td style="text-align:center;">前者小于后者，运算结果为真，否者为假</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于或等于</td><td style="text-align:center;">x &gt;= y</td><td style="text-align:center;">前者大于或等于后者，运算结果为真，否则为假</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于或等于</td><td style="text-align:center;">x &lt;= y</td><td style="text-align:center;">前者小于或等于后者，运算结果为真，否则为假</td></tr><tr><td style="text-align:center;">==</td><td style="text-align:center;">等于</td><td style="text-align:center;">x == y</td><td style="text-align:center;">前者等于后者，运算结果为真，否则为假</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td><td style="text-align:center;">x != y</td><td style="text-align:center;">前者不等于后者，运算结果为真，否则为假</td></tr></tbody></table>`,31)]))}const c=t(e,[["render",l]]);export{y as __pageData,c as default};
